.data
ask_x: .asciz "Enter x (double number, accuracy): "
error_msg: .asciz "Error: x must be in range (0; 0.0005]!\n"
result_msg: .asciz "pi = "
max_x: .double 0.0005
min_x: .double 0
two: .double 2

.text
main:
    jal get_x       # Call get_x to read x; x is stored in fa1 (return value)
    fld fa2, max_x, t0 # Load max_x into fa2 for check_x
    fld fa3, min_x, t0 # Load min_x into fa3 for check_x
    jal check_x      # Call check_x to validate x; returns 1 in a0 if valid, 0 if invalid
    beq a0, zero, end_program # If a0 == 0 (invalid), terminate the program
    
    # fa0 stores 2
    fld fa4, two, t0
    # fa1 stores x
    # fa2 stores pi[i-1]
    fld fa2, two, t0
    # fa3 stores result
    fld fa3, two, t0
    # fa4 stores a(0)
    fld fa4, min_x, t0
    
    jal vieta        # Call vieta; returns the calculated pi in fa3
    # Printing result
  li a7, 4
  la a0, result_msg
  ecall
  # fa3 stores the calculated value of pi
  fmv.d fa0, fa3
  li a7, 3
  ecall

end_program: # Exit the program
    li a7, 10
    ecall
  
vieta:
    # Saving return address on the stack
    addi sp, sp, -4 
    sw ra, 0(sp)

vieta_cycle:
    # a(i) = sqrt(2 + a(i-1))
    fadd.d ft0, fa4, fa0  # ft0 = 2 + a(i-1)
    fsqrt.d fa4, ft0      # a(i) = sqrt(2 + a(i-1))
    # pi(i) = 2 / a(n)
    fdiv.d ft3, fa0, fa4  

    # Check error: |pi(i-1) - pi(i)|
    fsub.d ft0, fa2, ft3  # ft0 = pi(i-1) - pi(i)
    fabs.d ft0, ft0       # |pi(i-1) - pi(i)|
    fle.d t2, ft0, fa1    # Check |pi(i-1) - pi(i)| <= x
    bnez t2, end_vieta    # If condition is met, exit

    # Update ?(n)
    fmul.d fa3, fa3, ft3
    
    # Update pi(i - 1)
    fmv.d fa2, ft3
    
    j vieta_cycle
    
end_vieta:
    # Return the result in fa3
    fmv.d fa3, ft3
    # Read return address from the stack
    lw ra, 0(sp)
    addi sp, sp, 4
    ret
    
get_x:
    # Ask for x
    li a7, 4
    la a0, ask_x
    ecall
    # Get input number
  li a7, 7
  ecall
  # Save x in fa1 (return value)
  fmv.d fa1, fa0
    ret
    
check_x:
  mv t0, zero
  mv t1, zero
  li t3, 1
    # Check if x is in the range (0; 0.0005]
    fle.d t0, fa1, fa3 # Check: x <= 0
  fgt.d t1, fa1, fa2 # Check: x > 0.0005
  beq t0, t3, wrong_x_branch # If x <= 0, branch to error
  beq t1, t3, wrong_x_branch # If x > 0.0005, branch to error
  li a0, 1            # If all checks pass, set a0 to 1 (valid)
    ret # Return from check_x

wrong_x_branch:
    # Print error message
    li a7, 4
    la a0, error_msg
    ecall
    li a0, 0           # Set a0 to 0 (invalid)
  ret
